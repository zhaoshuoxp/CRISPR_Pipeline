includeConfig './configs/pipeline_input.config'
includeConfig './configs/dashboard.config'

process {
    executor = 'slurm'
    
    // Resource allocation optimization
    queue = { 
        // Select queue based on estimated runtime and resources
        if (task.time > 4.hour || task.memory > 100.GB) return 'long'
        else if (task.time > 1.hour || task.memory > 50.GB) return 'normal'
        else return 'short'
    }
    
    // Default settings for all processes
    errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
    maxRetries = 3
    cpus = { 2 * task.attempt }
    memory = { 32.GB * task.attempt }
    time = { 1.hour * task.attempt }
    
    // Process label groups for better organization
    withLabel: 'data_preparation' {
        container = 'docker://sjiang9/conda-docker:0.1'
    }
    
    withLabel: 'mapping' {
        container = 'docker://sjiang9/conda-docker:0.1'
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        time = { 1.hour * task.attempt }
    }
    
    withLabel: 'inference' {
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        time = { 1.hour * task.attempt }
    }
    
    // Individual process configurations
    withName: anndata_concat {
        label = 'data_preparation'
    }

    withName: createGuideRef {
        label = 'data_preparation'
    }

    withName: createHashingRef {
        label = 'data_preparation'
    }

    withName: seqSpecCheck {
        label = 'data_preparation'
    }

    withName: createDashboard_HASHING {
        label = 'data_preparation'
    }

    withName: createDashboard {
        label = 'data_preparation'
    }

    withName: CreateMuData_HASHING {
        label = 'data_preparation'
    }

    withName: CreateMuData {
        label = 'data_preparation'
    }
    
    withName: demultiplex {
        label = 'data_preparation'
    }

    withName: doublets_scrub {
        label = 'data_preparation'
    }

    withName: downloadReference {
        label = 'data_preparation'
    }

    withName: filter_hashing {
        label = 'data_preparation'
    }

    withName: guide_assignment_mudata {
        label = 'data_preparation'
    }

    withName: hashing_concat {
        label = 'data_preparation'
    }

    withName: mappingGuide {
        label = 'mapping'
    }

    withName: mappingHashing {
        label = 'mapping'
    }

    withName: mappingscRNA {
        label = 'mapping'
    }

    withName: prepare_covariate {
        label = 'data_preparation'
    }

    withName: prepare_guide_inference {
        label = 'data_preparation'
    }

    withName: prepare_user_guide_inference {
        label = 'data_preparation'
    }

    withName: prepare_all_guide_inference {
        label = 'data_preparation'
    }

    withName: PreprocessAnnData {
        label = 'data_preparation'
    }

    withName: seqSpecParser {
        label = 'data_preparation'
    }

    withName: guide_assignment_cleanser {
        container = 'docker://sjiang9/cleanser:0.3'
        label = 'inference'
    }

    withName: guide_assignment_sceptre {
        container = 'docker://igvf/sceptre-igvf:v0.2'
        label = 'inference'
    }
    
    withName: inference_sceptre {
        container = 'docker://igvf/sceptre-igvf:v0.2'
        label = 'inference'
    }

    withName: inference_perturbo {
        container = 'docker://pinellolab/perturbo-cuda:0.1'
        label = 'inference'
        // Increase resources for GPU-accelerated tasks
        cpus = { 8 * task.attempt }
        memory = { 96.GB * task.attempt }
        time = { 2.hour * task.attempt }
    }

    withName: inference_mudata {
        label = 'inference'
    }

    withName: mergedResults {
        label = 'data_preparation'
    }

    withName: evaluation_plot {
        label = 'data_preparation'
    }

    withName: evaluation_undefined_plot {
        label = 'data_preparation'
    }
}

singularity {
    enabled = true
    autoMounts = true 
    runOptions = '--nv'
    // Add caching to improve performance
    cacheDir = "$HOME/.singularity/cache"
    pullTimeout = '20 min'
}

trace {
    enabled = true
    file = 'pipeline_trace.txt'
    overwrite = true
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes'
}

// Add reporting
report {
    enabled = true
    file = 'pipeline_report.html'
    overwrite = true
}

// Add timeline
timeline {
    enabled = true
    file = 'pipeline_timeline.html'
    overwrite = true
}

// Add executor resource configuration
executor {
    queueSize = 100
    submitRateLimit = '10 sec'
}